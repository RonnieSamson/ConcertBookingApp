// <auto-generated />
using System;
using Concert.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Concert.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805084331_InitialWithExtendedData")]
    partial class InitialWithExtendedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Concert.Data.Entity.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PerformanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            BookingDate = new DateTime(2025, 2, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerEmail = "john.doe@example.com",
                            CustomerName = "John Doe",
                            PerformanceId = "1"
                        },
                        new
                        {
                            Id = "2",
                            BookingDate = new DateTime(2025, 2, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerEmail = "jane.smith@example.com",
                            CustomerName = "Jane Smith",
                            PerformanceId = "4"
                        },
                        new
                        {
                            Id = "3",
                            BookingDate = new DateTime(2025, 3, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerEmail = "bob.johnson@example.com",
                            CustomerName = "Bob Johnson",
                            PerformanceId = "7"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.ConcertEntity", b =>
                {
                    b.Property<string>("ConcertId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ConcertId");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            ConcertId = "1",
                            Description = "A night of rock music with legendary bands",
                            Title = "Rock Night"
                        },
                        new
                        {
                            ConcertId = "2",
                            Description = "Smooth jazz evening with world-class musicians",
                            Title = "Jazz Night"
                        },
                        new
                        {
                            ConcertId = "3",
                            Description = "The biggest pop hits performed live",
                            Title = "Pop Night"
                        },
                        new
                        {
                            ConcertId = "4",
                            Description = "Beautiful classical music performed by symphony orchestra",
                            Title = "Classical Symphony"
                        },
                        new
                        {
                            ConcertId = "5",
                            Description = "High-energy electronic music and DJ performances",
                            Title = "Electronic Dance Festival"
                        },
                        new
                        {
                            ConcertId = "6",
                            Description = "Intimate acoustic performances by indie artists",
                            Title = "Acoustic Unplugged"
                        },
                        new
                        {
                            ConcertId = "7",
                            Description = "Heavy metal concert featuring brutal bands",
                            Title = "Metal Mayhem"
                        },
                        new
                        {
                            ConcertId = "8",
                            Description = "Country classics and modern hits",
                            Title = "Country Music Night"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcertId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcertId = "1",
                            EndTime = new DateTime(2025, 3, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Göteborg Arena",
                            StartTime = new DateTime(2025, 3, 15, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2",
                            ConcertId = "1",
                            EndTime = new DateTime(2025, 3, 20, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Stockholm Globen",
                            StartTime = new DateTime(2025, 3, 20, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3",
                            ConcertId = "1",
                            EndTime = new DateTime(2025, 3, 25, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Live",
                            StartTime = new DateTime(2025, 3, 25, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4",
                            ConcertId = "2",
                            EndTime = new DateTime(2025, 4, 5, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Konserthuset Stockholm",
                            StartTime = new DateTime(2025, 4, 5, 19, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5",
                            ConcertId = "2",
                            EndTime = new DateTime(2025, 4, 10, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Göteborgs Konserthus",
                            StartTime = new DateTime(2025, 4, 10, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6",
                            ConcertId = "2",
                            EndTime = new DateTime(2025, 4, 15, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Opera",
                            StartTime = new DateTime(2025, 4, 15, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7",
                            ConcertId = "3",
                            EndTime = new DateTime(2025, 5, 1, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Friends Arena",
                            StartTime = new DateTime(2025, 5, 1, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8",
                            ConcertId = "3",
                            EndTime = new DateTime(2025, 5, 8, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Scandinavium",
                            StartTime = new DateTime(2025, 5, 8, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "9",
                            ConcertId = "3",
                            EndTime = new DateTime(2025, 5, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Arena",
                            StartTime = new DateTime(2025, 5, 15, 19, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "10",
                            ConcertId = "4",
                            EndTime = new DateTime(2025, 6, 3, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Konserthuset Stockholm",
                            StartTime = new DateTime(2025, 6, 3, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "11",
                            ConcertId = "4",
                            EndTime = new DateTime(2025, 6, 10, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Göteborgs Konserthus",
                            StartTime = new DateTime(2025, 6, 10, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "12",
                            ConcertId = "5",
                            EndTime = new DateTime(2025, 7, 13, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Ullevi Göteborg",
                            StartTime = new DateTime(2025, 7, 12, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "13",
                            ConcertId = "5",
                            EndTime = new DateTime(2025, 7, 20, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Stockholm Stadion",
                            StartTime = new DateTime(2025, 7, 19, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "14",
                            ConcertId = "5",
                            EndTime = new DateTime(2025, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Festivalen",
                            StartTime = new DateTime(2025, 7, 26, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "15",
                            ConcertId = "6",
                            EndTime = new DateTime(2025, 8, 5, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Cirkus Stockholm",
                            StartTime = new DateTime(2025, 8, 5, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "16",
                            ConcertId = "6",
                            EndTime = new DateTime(2025, 8, 12, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Liseberg Stora Scen",
                            StartTime = new DateTime(2025, 8, 12, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "17",
                            ConcertId = "6",
                            EndTime = new DateTime(2025, 8, 19, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Live",
                            StartTime = new DateTime(2025, 8, 19, 19, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "18",
                            ConcertId = "7",
                            EndTime = new DateTime(2025, 9, 7, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Hovet Stockholm",
                            StartTime = new DateTime(2025, 9, 7, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "19",
                            ConcertId = "7",
                            EndTime = new DateTime(2025, 9, 14, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Partille Arena",
                            StartTime = new DateTime(2025, 9, 14, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "20",
                            ConcertId = "8",
                            EndTime = new DateTime(2025, 10, 4, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Gröna Lund Stockholm",
                            StartTime = new DateTime(2025, 10, 4, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "21",
                            ConcertId = "8",
                            EndTime = new DateTime(2025, 10, 11, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Liseberg Stora Scen",
                            StartTime = new DateTime(2025, 10, 11, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "22",
                            ConcertId = "8",
                            EndTime = new DateTime(2025, 10, 18, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Malmö Live",
                            StartTime = new DateTime(2025, 10, 18, 19, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Email = "John123@example.com",
                            Name = "John",
                            Password = "John123"
                        },
                        new
                        {
                            Id = "2",
                            Email = "bob@example.com",
                            Name = "Bob Bengtsson",
                            Password = "anotherpassword"
                        },
                        new
                        {
                            Id = "3",
                            Email = "alice@example.com",
                            Name = "Alice",
                            Password = "securepassword"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.Booking", b =>
                {
                    b.HasOne("Concert.Data.Entity.Performance", "Performance")
                        .WithMany("Bookings")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.HasOne("Concert.Data.Entity.ConcertEntity", "Concert")
                        .WithMany("Performances")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Concert.Data.Entity.ConcertEntity", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
