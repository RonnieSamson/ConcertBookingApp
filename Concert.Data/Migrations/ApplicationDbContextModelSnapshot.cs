// <auto-generated />
using System;
using Concert.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Concert.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Concert.Data.Entity.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            BookingDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PerformanceId = "1",
                            UserId = "1"
                        },
                        new
                        {
                            Id = "2",
                            BookingDate = new DateTime(2024, 1, 2, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            PerformanceId = "2",
                            UserId = "2"
                        },
                        new
                        {
                            Id = "3",
                            BookingDate = new DateTime(2024, 1, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            PerformanceId = "3",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.ConcertEntity", b =>
                {
                    b.Property<string>("ConcertId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ConcertId");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            ConcertId = "1",
                            Description = "A night of rock music",
                            Title = "Rock Night"
                        },
                        new
                        {
                            ConcertId = "2",
                            Description = "A night of jazz music",
                            Title = "Jazz Night"
                        },
                        new
                        {
                            ConcertId = "3",
                            Description = "A night of pop music",
                            Title = "Pop Night"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcertId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcertId = "1",
                            EndTime = new DateTime(2024, 1, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2",
                            ConcertId = "2",
                            EndTime = new DateTime(2024, 1, 2, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 1, 2, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3",
                            ConcertId = "3",
                            EndTime = new DateTime(2024, 1, 3, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 1, 3, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Email = "John123@example.com",
                            Name = "John",
                            Password = "John123"
                        },
                        new
                        {
                            Id = "2",
                            Email = "bob@example.com",
                            Name = "Bob Bengtsson",
                            Password = "anotherpassword"
                        },
                        new
                        {
                            Id = "3",
                            Email = "alice@example.com",
                            Name = "Alice",
                            Password = "securepassword"
                        });
                });

            modelBuilder.Entity("Concert.Data.Entity.Booking", b =>
                {
                    b.HasOne("Concert.Data.Entity.Performance", "Performance")
                        .WithMany("Bookings")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concert.Data.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.HasOne("Concert.Data.Entity.ConcertEntity", "Concert")
                        .WithMany("Performances")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Concert.Data.Entity.ConcertEntity", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("Concert.Data.Entity.Performance", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Concert.Data.Entity.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
